***************
*** 6,12 ****
      
      # Method used by mostly all the ClassMethods when doing a search
      def parse_query(query=nil, options={}, models=nil)
-       valid_options = [:offset, :limit, :facets, :models, :results_format, :order, :scores, :operator]
        query_options = {}
        return if query.nil?
        raise "Invalid parameters: #{(options.keys - valid_options).join(',')}" unless (options.keys - valid_options).empty?
--- 6,12 ----
      
      # Method used by mostly all the ClassMethods when doing a search
      def parse_query(query=nil, options={}, models=nil)
+       valid_options = [:offset, :limit, :facets, :models, :results_format, :order, :scores, :operator, :highlight]
        query_options = {}
        return if query.nil?
        raise "Invalid parameters: #{(options.keys - valid_options).join(',')}" unless (options.keys - valid_options).empty?
***************
*** 103,111 ****
        conditions = [ "#{self.table_name}.#{primary_key} in (?)", ids ]
        result = configuration[:format] == :objects ? reorder(self.find(:all, :conditions => conditions), ids) : ids
        add_scores(result, solr_data) if configuration[:format] == :objects && options[:scores]
-       
        results.update(:facets => solr_data.data['facet_counts']) if options[:facets]
        results.update({:docs => result, :total => solr_data.total, :max_score => solr_data.max_score})
        SearchResults.new(results)
      end
      
--- 113,128 ----
        conditions = [ "#{self.table_name}.#{primary_key} in (?)", ids ]
        result = configuration[:format] == :objects ? reorder(self.find(:all, :conditions => conditions), ids) : ids
        add_scores(result, solr_data) if configuration[:format] == :objects && options[:scores]
+       highlighted = {}
+       solr_data.highlighting.map do |x,y| 
+         e={}
+         y1=y.map{|x1,y1| e[x1.gsub(/_[^_]*/,"")]=y1} unless y.nil?
+         highlighted[x.gsub(/[^:]*:/,"").to_i]=e
+       end unless solr_data.highlighting.nil?
+ 
        results.update(:facets => solr_data.data['facet_counts']) if options[:facets]
        results.update({:docs => result, :total => solr_data.total, :max_score => solr_data.max_score})
+       results.update({:highlights=>highlighted})
        SearchResults.new(results)
      end
      
***************
*** 155,158 ****
      end
    end
  
- end--- 172,175 ----
      end
    end
  
+ end
